classdef treeBotCollisionCheck < handle

%#ok<*NOPRT>

    methods
        function self = treeBotCollisionCheck()
			clf	
            self.Part1();
        end
    end

    methods (Static)

        function Part1()
            clf

            birdOnBranchPoints = cloudPoints.loadPointClouds('birdOnBranch.ply', [1.8,0.3,0]);

            robot = TreeBot;
            robot.PlotAndColourRobot();
            
            %% Move Robot

             q1 = robot.model.ikcon(transl(0.5,0.5, 0.2));
             q2 = robot.model.ikcon(transl(1.8,0.3, 0));

            steps = 100;
            qMatrix = jtraj(q1,q2,steps); % obtaing the joint space trajectory

            for n = 1:steps
               robot.model.animate(qMatrix(n, :));
               axis equal
               treeBotCollisionCheck.CheckCollision(robot.model, birdOnBranchPoints)
               pause(0.1)            

            end
            
        end

        function CheckCollision(robot, currentCloudPoints)

            currentPos = robot.fkine(robot.getpos).t; % Extract the position as a 3D vector

            xyzLimits = currentCloudPoints;

            isWithinX = (currentPos(1) >= xyzLimits(1, 1)) && (currentPos(1) <= xyzLimits(1, 2));
            isWithinY = (currentPos(2) >= xyzLimits(2, 1)) && (currentPos(2) <= xyzLimits(2, 2));
            isWithinZ = (currentPos(3) >= xyzLimits(3, 1)) && (currentPos(3) <= xyzLimits(3, 2));

            
             % Determine if the position is within all limits
             isWithinLimits = isWithinX && isWithinY && isWithinZ;

            %isWithinLimits = isWithinX && isWithinY || isWithinX && isWithinZ || isWithinY && isWithinZ; 
        
            % Check for collision
            if isWithinLimits
                disp("Crash");
            else
                disp("No Collision");
            end
                    


            % for i = 1:size(currentCloudPoints, 1) % Loop through the point cloud matrix
            %     %% Calculate the Euclidean distance
            %     %distance = norm(currentPos - currentCloudPoints(i, :)) % Calculate the distance
            %     distance = currentPos - currentCloudPoints(i, :);
            % 
            %     if distance < 1  % Check if the distance is less than 1
            %         disp("CRASH"); % Display crash message
            % 
            %     else
            %         disp("Safe distance")
            %     end
            %     pause(0.1)
            %     return
         end
    end
end


