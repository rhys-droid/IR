
robot = TreeBot;
robot.PlotAndColourRobot();
hold on


birdHousePrintingOffset = [0,0.2,0];

birdhousePos1 = [1,0.5,0];
birdhouseDest1 = [1.1,0.7,0.3];

birdhousePos2 = birdhousePos1 + birdHousePrintingOffset;
birdhouseDest2 = birdhouseDest1 + birdHousePrintingOffset;

birdhousePart1 = PlaceObject("birdhouse.ply", birdhousePos1);
birdhousePart2 = PlaceObject("birdhouse.ply", birdhousePos2);

vertsBhouse1 = get(birdhousePart1,'Vertices');
set(birdhousePart1, 'Vertices',vertsBhouse1(:,1:3));


vertsBhouse1 = get(birdhousePart2,'Vertices');
set(birdhousePart2, 'Vertices',vertsBhouse1(:,1:3));

hold on

currentPo = robot.model.fkine(robot.model.getpos).t;
currentPos = currentPo.';

trajM = [currentPos; birdhousePos1; birdhouseDest1; birdhousePos2; birdhouseDest2];

%birdHouseVerts = PlaceObject('birdhouse.ply'); %Obtaining .ply file verticies


%set(vertsBhouse1,'Vertices',vertsBhouse1);
axis equal

%trajM = [trajM; zeros(1, 3)];

for m = 2:height(trajM)
                
    q1 = robot.model.ikcon(transl(trajM(m-1,:)));
    q2 = robot.model.ikcon(transl(trajM(m,:)));
    steps = 50;
    qMatrix = jtraj(q1,q2,steps);
        
    for n = 1:steps

        robot.model.animate(qMatrix(n, :));
        axis equal
        pause(0.01)
        disp("Moving")

        if rem(m, 2) ~= 0
            disp('even');
            % robot.model.animate(qMatrix(n, :));
            currentTransformationMatrix = robot.model.fkine(qMatrix(n,:));


            %pickedUpPart = PlaceObject('birdhouse.ply', robot.model.fkine(robot.model.getpos).t); %if needing to pick up different names parts, use counting system "birdhouse" +num2string(n) + '.ply'
            
            %pickedUpPartVerts = get(pickedUpPart, 'Vertices');
            
            transformedVertices = [vertsBhouse1,ones(size(vertsBhouse,1),1)]*currentTransformationMatrix.T';
            set(birdhousePart1,'Vertices',transformedVertices(:,1:3));
            % pause(0.01)    
        end

    end

     
     pause(0.01);
     %disp("Moved")

end



